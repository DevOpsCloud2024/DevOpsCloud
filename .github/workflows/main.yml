name: "CI/CD Pipeline"

on:
  workflow_dispatch:

  push:
    branches:
      - "*"
      - "*/*"
      - "**"

  pull_request:

jobs:
  phplint:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Laravel Pint
        uses: aglipanci/laravel-pint-action@2.0.0
        with:
          preset: "laravel"
          verboseMode: "true"
          testMode: "true"

  eslint:
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install -D

      - name: Run Prettier
        run: pnpm format:fix

      - name: Remove node_modules
        run: rm -rf node_modules

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ðŸ”¨ Fix linting issues"
          commit_user_name: "GitHub Actions"

  run-tests:
    needs: [eslint, phplint]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"

      - name: Install dependencies
        run: composer install --no-ansi --prefer-dist

      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: "Configure .env"
        run: cp .env.ci .env

      - name: Install dependencies
        run: pnpm install

      - name: Build assets
        run: pnpm run build

      - name: Run migrations
        run: php artisan migrate:fresh --seed --force

      - name: Generate application key
        run: php artisan key:generate

      - name: Run tests
        run: ./vendor/bin/pest

    #   - name: Setup Composer cache
    #     id: composer-cache
    #     run: echo "dir=$(composer config cache-files-dir) >> $GITHUB_OUTPUT"

    #   - name: Cache Composer dependencies
    #     uses: actions/cache@v4
    #     with:
    #       path: ${{ steps.composer-cache.outputs.dir }}
    #       key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
    #       restore-keys: |
    #         ${{ runner.os }}-composer-

  deploy-terraform:
    if: github.ref == 'refs/heads/main'
    needs: [run-tests]
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./terraform

    outputs:
      cluster-name: ${{ steps.cluster-name.outputs.cluster_name }}
      webserver-service-name: ${{ steps.webserver-service-name.outputs.ecs_service_webserver_name }}
      scheduler-service-name: ${{ steps.scheduler-service-name.outputs.ecs_service_scheduler_name }}
      worker-service-name: ${{ steps.worker-service-name.outputs.ecs_service_worker_name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> "$GITHUB_ENV"
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} " >> "$GITHUB_ENV"
            echo "TF_VAR_app_key=${{ secrets.TF_VAR_APP_KEY }}" >> "$GITHUB_ENV"

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init
        run: terraform init

      - name: Terraform validate
        run: terraform validate -no-color

      - name: Terraform plan
        run: terraform plan -no-color -out=tfplan

      - name: Terraform apply
        run: terraform apply -no-color -auto-approve tfplan

      - name: Save Cluster name
        id: cluster-name
        run: echo "cluster_name=$(terraform output ecs_cluster_name)" >> "$GITHUB_OUTPUT"
      - name: Save webserver service name
        id: webserver-service-name
        run: echo "ecs_service_webserver_name=$(terraform output ecs_service_webserver_name)" >> "$GITHUB_OUTPUT"

      - name: Save scheduler service name
        id: scheduler-service-name
        run: echo "ecs_service_scheduler_name=$(terraform output ecs_service_scheduler_name)" >> "$GITHUB_OUTPUT"

      - name: Save worker service name
        id: worker-service-name
        run: echo "ecs_service_worker_name=$(terraform output ecs_service_worker_name)" >> "$GITHUB_OUTPUT"

  push-to-registry:
    if: github.ref == 'refs/heads/main'
    strategy:
      max-parallel: 2
      matrix:
        repo: ["laravel-repo", "nginx-repo"]

    needs: [deploy-terraform]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build docker image
        env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{ matrix.repo }}
            IMAGE_TAG: "latest"
            DOCKER_PREFIX: ${{ matrix.repo == 'laravel-repo' && 'php' || 'nginx' }}
        run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f $DOCKER_PREFIX/Dockerfile .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  pull-image-to-task:
    if: github.ref == 'refs/heads/main'
    needs: [push-to-registry, deploy-terraform]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-west-1"

      - name: Update services
        run: |
            aws ecs update-service --cluster ${{ needs.deploy-terraform.outputs.cluster-name }} --service ${{ needs.deploy-terraform.outputs.webserver-service-name }} --force-new-deployment
            aws ecs update-service --cluster ${{ needs.deploy-terraform.outputs.cluster-name }} --service ${{ needs.deploy-terraform.outputs.scheduler-service-name }} --force-new-deployment
            aws ecs update-service --cluster ${{ needs.deploy-terraform.outputs.cluster-name }} --service ${{ needs.deploy-terraform.outputs.worker-service-name }} --force-new-deployment
